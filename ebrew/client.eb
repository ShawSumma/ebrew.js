
(ws-new port) ?
(wss-new port) ?
(on-close ws (cb)) ?
(on-open ws (cb)) ?
(on-message [data] ws (cb data)) ?
(on-connection [data] wss (cb data)) ?
(ws-send ws data) ? 

(str obj) ?
(print x) ?
(get obj ent) ?
(set obj ent val) ?

(to-json o) ?
(from-json s) ?
(object) ?

(math-sin x) ?
(math-cos x) ?
(math-sqrt x) ?
(math-random) ?
(add y x) ?
(sub y x) ?
(mul y x) ?
(div y x) ?
(mod y x) ?

(if c (t) (f)) ?
(while (c) (t)) ?

(InitWindow x y name) ?
(CloseWindow) ?
(WindowShouldClose) ?
(GetFrameTime) ?
(SetTargetFPS fps) ?

(KEY_UP) ?
(KEY_DOWN) ?
(KEY_RIGHT) ?
(KEY_LEFT) ?
(IsKeyPressed key) ?
(IsKeyDown key) ?

(BeginDrawing) ?
(EndDrawing) ?

(DrawCircle x y size color) ?
(DrawRectangle x y sizex sizey color) ?
(DrawText text x y size color) ?
(ClearBackground color) ?

(RAYWHITE) ?
(RED) ?
(ORANGE) ?
(YELLOW) ?
(GREEN) ?
(BLUE) ?
(PURPLE) ?
(WHITE) ?
(BLACK) ?

(above x y) ?
(equal x y) ?

(stop-interval iv) ?
(start-interval ms (f)) ?

(get-time) ?

# basics #

(let [x] x (in x)) in x

(do x y) y

(not x) if x 0 1

(and x (y)) if x y 0
(or x (y)) if x x y

# globals #

(player-size) 40
(world-size) 800

# arrays #

(array-each-in-range [name] obj low high (in n name))
and above high low
do  in low get obj low
    array-each-in-range name obj add 1 low high in n name

(array-each [name] obj (in n name))
array-each-in-range name obj 0 get obj "length"
    in n name

(array-length arr)
get arr "length"

(array-push arr ent)
let len array-length arr
do  set arr "length" add 1 len
    set arr len ent

(array-pop arr ent)
let len array-length arr
do  set arr "length" sub 1 len
    get arr len

# drawing #

(draw-player-part color data)
and data
let pos get data "pos"
DrawRectangle
    sub div 2 player-size get pos "x"
    sub div 2 player-size get pos "y"
    add 1 player-size
    add 1 player-size
    color

(draw-player player)
and player
let parts get player "parts"
let color get player "color"
array-each part parts
    draw-player-part color part

(draw-players game)
array-each player get game "players"
    draw-player player

(draw-apples game)
array-each apple get game "apples"
    draw-player-part get apple "color" apple

# controls #

(send-ctrl ws w s a d)
let obj object
do  set obj "type" "move"
do  set obj "up" if w 1 0 
do  set obj "down" if s 1 0 
do  set obj "left" if a 1 0 
do  set obj "right" if d 1 0 
    ws-send ws to-json obj

# game loop #

(game-loop ws store)
let game get store "game"
and game
let players get game "players"
do  BeginDrawing
do  ClearBackground BLACK
do  send-ctrl ws
        or IsKeyPressed KEY_UP IsKeyPressed 'W
        or IsKeyPressed KEY_DOWN IsKeyPressed 'S
        or IsKeyPressed KEY_LEFT IsKeyPressed 'A
        or IsKeyPressed KEY_RIGHT IsKeyPressed 'D
do  and game
do  draw-players game
do  draw-apples game
    0
    EndDrawing

(game-init ws)
let store object
do  set store "game" 0
do  on-message data ws
    let data from-json data
    let game get data "game"
    do  set store "game" game
        0
do  InitWindow world-size world-size "Snake Battle Royale"
    start-interval div 60 1000 game-loop ws store

# init #

(main)
# let ws ws-new "ws://2.tcp.ngrok.io:14597" #
let ws ws-new "ws://localhost:8080"
on-open ws game-init ws