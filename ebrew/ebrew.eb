#
    LIB
#

# externals #

(word) ?
(peek -a) ? (poke -a a) ?
(load -a) ? (store -a a) ?

(neg n) ? (not n) ?
(add a b) ? (mul a b) ? (mod a b) ? (equal a b) ?
(sub a b) ? (div a b) ? (shl a b) ? (above a b) ?

(linux rdi rsi rdx rcx r8 r9 rax) ?

# math #

(range n a b) not or (above n a) (above b n)
(to -b (op a b) a) let b (load -b) (do (store -b (op a b)) b)
(pow2 n) shl n 1
(successive n) add 1 n
(preceding n) sub 1 n
(inc -n) to -n add 1
(dec -n) to -n sub 1

# yes we have this #

(memcmp a b n)
or  not n
and equal (peek a) (peek b)
    memcmp (successive a) (successive b) (preceding n)

(strncmp a b an bn)
and equal an bn
    memcmp a b bn

(strlen s) and (peek s) (successive strlen successive s)

# io #

(stdin  buffer size) linux 0 buffer size 0 0 0 0
(stdout buffer size) linux 1 buffer size 0 0 0 1
(stderr buffer size) linux 2 buffer size 0 0 0 1

(retry-mem (io buffer size) begin end)
let error-key (neg 1)
for i begin
and not (equal i error-key)
let n-read (io i (sub i end))
and n-read
if  equal n-read error-key
    n-read
    add i n-read

(retry-string-write (out buffer size) s) retry-mem out s (add s (strlen s))
(retry-string-read (in buffer size) a b) poke (retry-mem in a b) 0

# runtime #

(brk address) linux address 0 0 0 0 0 12
(exit code) linux code 0 0 0 0 0 60

(runtime-exit code out end)
do  retry-mem stdout out end
    exit code

(runtime (main (exit code out end) in out mem) inbuf outbuf membuf)
let in  (brk 0)
let out (add in  inbuf )
let mem (add out outbuf)
do  brk (add mem membuf)
do  store mem (add mem word)
do  retry-string-read stdin in out
    main runtime-exit in out mem

(error code message)
do  retry-string-write stderr message
do  retry-string-write stderr "\n"
    exit code

# printing #

(vput-mem (put a -out) a b -out)
do  for i a
    and above i b
    let byte (peek i)
    do  put byte -out
        successive i
    -out

(vput-string (put a -out) s -out)
do  for p s
    let a (peek p)
    and a
    do  put a -out
        successive p
    -out

(put byte -out)
do  poke (load -out) byte
do  inc -out
    -out

(put-digits (put-digit a -out) base a -out)
if  a
    put-digit                 (mod base a)
    put-digits put-digit base (div base a)
    -out
    -out

(put-number (put-digit a -out) base a -out)
if  a 
    put-digits put-digit base a -out
    put '0 -out

(put-digit-16 a -out) put (add a (if (above a 10) '0 '7)) -out
(put-digit-10 a -out) put (add a                  '0    ) -out

(put-dec a -out) put-number put-digit-10 10 a -out
(put-hex a -out) put-number put-digit-16 16 a -out

(put-string s -out) vput-string put s -out
(put-mem a b  -out) vput-mem put a b -out

# scanning #

(lex (class byte) -in)
and class (peek load -in)
    inc -in

#
    OPERATIONAL SEMANTICS
#

# a little setup #

# list #

(List-elem list)                list
(List-rest list) add (List-elem list) word
(List)                List-rest       word

(list-push -mem list-elem rest)
let list (to -mem add List)
do  store (List-elem list) list-elem
do  store (List-rest list) rest
    list

(list-elem list) load List-elem list
(list-pop  list) load List-rest list

(list-count list) and list (successive list-count list-pop list)

(list-judge (elem-judge elem-a elem-b) list-a list-b)
or  not (or list-a list-b)
and elem-judge            (list-elem list-a) (list-elem list-b)
    list-judge elem-judge (list-pop  list-a) (list-pop  list-b)

# type #

(Type-params type)                  type
(Type-kind   type) add (Type-params type) word
(Type)                  Type-kind         word

(type-params type) load Type-params type
(type-kind   type) load Type-kind   type

(type-list -mem list param) list-push -mem param list
(type-unit) 0
(type-func -mem list)
let type (to -mem add Type)
do  store (Type-kind type) 1
do  store (Type-params type) list
    type

(type-judge (param-judge param-a param-b) type-a type-b)
or  equal type-a type-b
and type-a
and type-b
and equal (type-kind type-a) (type-kind type-b)
    list-judge param-judge (type-params type-a) (type-params type-b)

# span #

(Span-begin span)                 span
(Span-end   span) add (Span-begin span) word
(Span)                 Span-end         word

(span-begin span) load Span-begin span
(span-end   span) load Span-end   span

(make-span -mem a b)
let span (to -mem add Span)
do  store (Span-begin span) a
do  store (Span-end   span) b
    span

# param #

(Param-kind param)                 param
(Param-span param) add (Param-kind param) word
(Param-type param) add (Param-span param) word
(Param-impl param) add (Param-type param) word
(Param)                 Param-impl        word

(param-kind param) load Param-kind param
(param-span param) load Param-span param
(param-type param) load Param-type param
(param-impl param) load Param-impl param

(param-init param span type impl) 
do  store (Param-kind param) 0
do  store (Param-span param) span
do  store (Param-type param) type
do  store (Param-impl param) impl
    param

(type-param -mem a b type impl) param-init (to -mem add Param) (make-span -mem a b) type impl
(param-judge param-a param-b) type-judge param-judge (param-type param-a) (param-type param-b)

# functions #

(judge type-a type-b) type-judge param-judge type-a type-b

(book -mem -head list span-a type impl)
if  list
let span-b param-span list-elem list
or  and span-b
    let a-begin span-begin span-a
    let a-end   span-end   span-a
    let b-begin span-begin span-b
    let b-end   span-end   span-b
    and strncmp b-begin a-begin (sub b-begin b-end) (sub a-begin a-end)
        error 2 "redefinition"
    book -mem -head (list-pop list) span-a type impl
    load store -head (list-push -mem type-param -mem (span-begin span-a) (span-end span-a) type impl (load -head))

(lookup (gen-capture impl offset) impl list a b depth)
and list
let var list-elem list
let span param-span var
if  span #zero in case of lambda token#
let src-a span-begin span
let src-b span-end   span
if  strncmp src-a a (sub src-a src-b) (sub a b)
    var
    lookup gen-capture impl list-pop list a b depth
    #do lambda token stuff here#
let offset param-impl var
do  gen-capture impl offset
    lookup gen-capture impl list-pop list a b offset

# At the beginning of a function, we have to 
push all the parameters to the list. #
(push-parameters (gen impl index) -mem -head impl params)
and params
let rest list-pop params
let index push-parameters gen -mem -head impl rest
let list (load -head)
let param list-elem params
let span param-span param
let type param-type param
let offset gen impl index
do  book -mem -head list span type offset
    successive index

# At the end of a function, we have to 
pop all the parameters off the list. #
(pop-parameters list params)
if  params
    pop-parameters (list-pop list) (list-pop params)
    list

(call (gen-trunk impl arity) (gen-term impl) -type impl params)
do  gen-trunk impl (list-count params)
    store -type type-unit

(flake -flake) inc -flake

(branch-in (gen-label impl label) impl label) gen-label impl label

(literal (gen-lit impl a b label) -type impl a b label)
do  gen-lit impl a b label
do  store -type type-unit
    0

(reference (gen-ref impl) (gen-capture impl offset) (gen-ref-end impl offset a b) -type impl list a b)
let depth (gen-ref impl)
let param (lookup gen-capture impl list a b depth)
if  not param
    error 1 "unknown reference"
let type   param-type param
let offset param-impl param
do  gen-ref-end impl offset a b
    store -type type

# Store, then either give the remaining
branches or call when out. #
(branch (gen-branch impl) (gen-trunk impl params) (gen-term impl) -type impl params rest)
do  gen-branch impl
or  list-pop rest
do  call gen-trunk gen-term -type impl params
    0

# context #

(Sem-mem   sem)                sem
(Sem-list  sem) add (Sem-mem   sem) word
(Sem-flake sem) add (Sem-list  sem) word
(Sem-type  sem) add (Sem-flake sem) word
(Sem-impl  sem) add (Sem-type  sem) word
(Sem)                Sem-impl       word

# api #

(op-new (gen -mem out) -mem out)
let impl (gen -mem out)
let sem (to -mem add Sem)
do  store (Sem-mem   sem) (load -mem)
do  store (Sem-list  sem) 0
do  store (Sem-flake sem) 0
do  store (Sem-impl  sem) impl
    sem

(op-del (gen -mem impl) -mem -impl)
do  to -mem sub Sem
    (gen -mem (load -impl))

(op-type-unit) 0
(op-type-list sem list param) type-list (Sem-mem sem) list param
(op-type-func sem list) type-func (Sem-mem sem) list
(op-type-param sem a b type impl) type-param (Sem-mem sem) a b type impl

# push-parameters should hand back the list for us to store #
(op-parameters (gen impl index) sem params) push-parameters gen (Sem-mem sem) (Sem-list sem) (load Sem-impl sem) params
(op-parameters-end sem params) store (Sem-list sem) pop-parameters (load Sem-list sem) params

(op-flake sem) flake (Sem-flake sem)
(op-term params) param-type (list-elem params)
(op-label (gen impl label) sem label) branch-in gen (load Sem-impl sem) label
(op-lit (gen-lit impl a b label) sem a b label) literal gen-lit (Sem-type sem) (load Sem-impl sem) a b label

(op-ref (gen-ref impl) (gen-capture impl offset) (gen-ref-end impl offset a b) sem a b) reference gen-ref gen-capture gen-ref-end (Sem-type sem) (load Sem-impl sem) (load Sem-list sem) a b

# Store, then either give the remaining
branches or call when out. #
(op-branch (gen-branch impl) (gen-trunk impl params) (gen-term impl) sem params rest) branch gen-branch gen-trunk gen-term (Sem-type sem) (load Sem-impl sem) params rest

# Judge types. If matched, we're done.
If not, store, and if nullary, call. #
(op-trunk (gen-branch impl) (gen-trunk impl params) (gen-term impl) sem param)
let arg (load Sem-type sem)
and not judge param arg
let params type-params arg
do  gen-branch (load Sem-impl sem)
or  params
do  call gen-trunk gen-term (Sem-type sem) (load Sem-impl sem) params
    0

(op-decl (gen-decl impl) sem param)
let span param-span param
    book (Sem-mem sem) (Sem-list sem) (load Sem-list sem) (make-span (Sem-mem sem) (span-begin span) (span-end span)) (param-type param) (gen-decl (load Sem-impl sem))

(op-def (gen-def impl a b) (gen-param impl index) sem param)
let span param-span param
do  gen-def (load Sem-impl sem) (span-begin span) (span-end span)
    push-parameters gen-param (Sem-mem sem) (Sem-list sem) (load Sem-impl sem) (type-params param-type param)

(op-def-end (gen-def-end impl) sem param)
do  op-parameters-end sem (type-params param-type param)
    gen-def-end (load Sem-impl sem)

# lies #

(op-var (gen impl label) sem label a b)
    book (Sem-mem sem) (Sem-list sem) (load Sem-list sem) (make-span (Sem-mem sem) a b) type-unit (gen (load Sem-impl sem) label)

(op-var-in (gen impl label) sem label)
    gen (load Sem-impl sem) label

(op-var-end (gen impl label) sem label)
do  gen (load Sem-impl sem) label
    store (Sem-list sem) (list-pop (load Sem-list sem))

#
    X86_64 BACKEND
#

# truth #

(x86_64-lf -out) put '\n -out
(x86_64-cm -out) put ',  -out
(x86_64-sp -out) put '   -out

(x86_64-mov -out) put-string "mov"  -out
(x86_64-ret -out) put-string "ret"  -out

(x86_64-rax -out) put-string "%rax" -out
(x86_64-rbx -out) put-string "%rbx" -out

(x86_64-raxptr -out) put-string "(%rax)" -out
(x86_64-ripptr -out) put-string "@GOTPCREL(%rip)" -out

(x86_64-mangle-prefix -out) put 'F -out
(x86_64-mangle-mem a b -out) vput-mem put-hex a b x86_64-mangle-prefix -out
(x86_64-mangle-string s -out) vput-string put-hex s x86_64-mangle-prefix -out

(x86_64-label-prefix -out) put 'L -out
(x86_64-label-name label -out) put-dec label x86_64-label-prefix -out
(x86_64-label-stmt-suf -out) x86_64-lf put ': -out
(x86_64-label-stmt label -out) x86_64-label-stmt-suf x86_64-label-name label -out

(x86_64-stack -out -depth (reg -out) ins (op -depth)) do (x86_64-lf reg x86_64-sp put-string ins -out) (op -depth)
(x86_64-pop  -depth -out) x86_64-stack -out -depth x86_64-rbx "pop"  inc
(x86_64-push -depth -out) x86_64-stack -out -depth x86_64-rax "push" dec

(x86_64-jc label s -out) x86_64-lf x86_64-label-name label x86_64-sp put-string s -out
(x86_64-czjc label s -out) x86_64-jc label s x86_64-lf x86_64-rax x86_64-cm x86_64-rax x86_64-sp put-string "test" -out

(x86_64-section-header (vput a b -out) a b -out) x86_64-label-stmt-suf vput a b x86_64-lf vput a b put-string ".section .text." -out
(x86_64-initdef name body -out) x86_64-lf x86_64-ret x86_64-lf put-string body x86_64-section-header x86_64-mangle-mem name (add name strlen name) -out

(x86_64-load-local  depth offset -out) x86_64-lf x86_64-rax x86_64-cm x86_64-raxptr put-dec (shl 3 (sub depth offset)) x86_64-sp x86_64-mov -out
(x86_64-load-global a b -out) x86_64-lf x86_64-rax x86_64-cm x86_64-ripptr x86_64-mangle-mem a b x86_64-sp x86_64-mov -out

# lies #

(x86_64-and  -out label) x86_64-czjc label "je"  -out
(x86_64-or   -out label) x86_64-czjc label "jne" -out
(x86_64-else -out label) x86_64-jc   label "jmp" -out

# Opsem will occasionally request a label statement. #
(x86_64-label -out label) x86_64-label-stmt label -out

# truth #

# Opsem gives us a chance to set
up some context. #
(x86_64-new out -depth -out)
do  store -out out
do  store -depth (shl (sub 1 (shl 3 word)) 1)
    x86_64-initdef "word"  "mov $8,%rax"
    x86_64-initdef "not"   "mov 8(%rsp),%rdi\ntest %rdi,%rdi\nsete %al\nmovzbl %al,%eax"
    x86_64-initdef "neg"   "mov 8(%rsp),%rdi\nmov %rdi,%rax\nneg %rax"
    x86_64-initdef "peek"  "mov 8(%rsp),%rdi\nmovzb (%rdi),%eax"
    x86_64-initdef "load"  "mov 8(%rsp),%rdi\nmov (%rdi),%rax"
    x86_64-initdef "equal" "mov 8(%rsp),%rsi\nmov 16(%rsp),%rdi\ncmp %rsi,%rdi\nsete %al\nmovzbl %al,%eax"
    x86_64-initdef "above" "mov 8(%rsp),%rsi\nmov 16(%rsp),%rdi\ncmp %rdi,%rsi\nseta %al\nmovzbl %al,%eax"
    x86_64-initdef "shl"   "mov 8(%rsp),%rsi\nmov 16(%rsp),%rdi\nmov %rsi,%rax\nmov %rdi,%rcx\nshl %cl,%rax"
    x86_64-initdef "mod"   "mov 8(%rsp),%rsi\nmov 16(%rsp),%rdi\nxor %edx,%edx\nmov %rsi,%rax\ndiv %rdi\nmov %rdx,%rax"
    x86_64-initdef "div"   "mov 8(%rsp),%rsi\nmov 16(%rsp),%rdi\nxor %edx,%edx\nmov %rsi,%rax\ndiv %rdi"
    x86_64-initdef "mul"   "mov 8(%rsp),%rsi\nmov 16(%rsp),%rdi\nmov %rsi,%rax\nmul %rdi"
    x86_64-initdef "sub"   "mov 8(%rsp),%rsi\nmov 16(%rsp),%rdi\nmov %rsi,%rax\nsub %rdi,%rax"
    x86_64-initdef "add"   "mov 8(%rsp),%rsi\nmov 16(%rsp),%rdi\nmov %rsi,%rax\nadd %rdi,%rax"
    x86_64-initdef "poke"  "mov 8(%rsp),%rsi\nmov 16(%rsp),%rdi\nmovb %sil,(%rdi)"
    x86_64-initdef "store" "mov 8(%rsp),%rsi\nmov 16(%rsp),%rdi\nmov %rsi,(%rdi)\nmov %rdi,%rax"
    x86_64-initdef "linux" "mov 8(%rsp),%rax\nmov 16(%rsp),%r9\nmov 24(%rsp),%r8\nmov 32(%rsp),%rcx\nmov 40(%rsp),%rdx\nmov 48(%rsp),%rsi\nmov 56(%rsp),%rdi\nsyscall"
let entry "_start"
    x86_64-lf x86_64-mangle-string entry x86_64-cm put-string entry x86_64-sp put-string ".equ"
    x86_64-lf put-string entry x86_64-sp put-string ".globl"
    -out

# Opsem needs to know where the
output iterator ends up. #
(x86_64-del out) out

# Opsem needs to know what offset
denotes a global declaration. #
(x86_64-global) 0

# Opsem needs to know what offset
to give a function parameter. #
(x86_64-local depth index) add depth successive index

# Opsem will tell us about literals.
We copy the exact text into an
immediate operand. #
(x86_64-lit -out a b) x86_64-lf x86_64-rax x86_64-cm put-mem a b put '$ x86_64-sp x86_64-mov -out

# Opsem will tell us about strings.
We copy the exact text into its own
data section. #
(x86_64-str -out a b label)
    x86_64-lf x86_64-rax x86_64-cm x86_64-ripptr x86_64-label-name label x86_64-sp x86_64-mov
    x86_64-lf put-string ".previous"
    x86_64-lf put-mem a b x86_64-sp put-string ".string"
    x86_64-label-stmt label
    x86_64-lf x86_64-label-name label put-string ".data." x86_64-sp put-string ".section"
    -out

# Opsem will tell us a lot about
backreferences. We first copy the
stack top into the accumulator. #
(x86_64-ref -out depth)
do  x86_64-lf x86_64-rax x86_64-cm put-string "%rsp" x86_64-sp x86_64-mov -out
    depth

# As opsem encounters lambda frames,
we'll load the capture pointer
through the accumulator. #
(x86_64-capture -out depth offset) x86_64-load-local depth offset -out

# If opsem finds something,
we'll either load it through
the accumulator or through
the program counter depending
whether it's global. We waste
any capture loads for a global
but we'll fix that when it
matters. #
(x86_64-ref-end -out depth offset a b) if offset (x86_64-load-local depth offset -out) (x86_64-load-global a b -out)

# Opsem will tell us about branches. #
(x86_64-branch -out -depth) x86_64-push -depth -out

# Opsem will tell us when it is done with a branch. #
(x86_64-term -out -depth) x86_64-pop -depth -out

# Opsem will tell us about calls.
Right now, we copy the destination
address from its position on the
stack based on the call arity.
We'll have to add another step for
lambdas to work. #
(x86_64-trunk -out -depth arity)
do  (to -depth add successive arity)
    x86_64-lf put-string ",%rsp" put-dec (shl 3 successive arity) put-string "add $"
    x86_64-lf x86_64-rax put '* x86_64-sp put-string "call"
    x86_64-lf x86_64-rax x86_64-cm put-string "(%rsp)" put-dec (shl 3 arity) x86_64-sp x86_64-mov
    -out

# If you can't make sense of this,
just look again. #
(x86_64-def     -out a b) x86_64-section-header x86_64-mangle-mem a b -out
(x86_64-def-end -out    ) x86_64-lf x86_64-ret -out

# damn lies #

(x86_64-var -out -depth label)
do  x86_64-push -depth -out
    load -depth

(x86_64-var-in -out label)
do  x86_64-label -out label
    x86_64-lf put-string "(%rsp)" x86_64-cm x86_64-rax x86_64-sp x86_64-mov
    -out

(x86_64-let-end -out -depth label)
    x86_64-pop -depth -out

(x86_64-for-end -out -depth label)
do  x86_64-or -out label
do  x86_64-pop -depth -out
    x86_64-lf x86_64-rax x86_64-cm x86_64-rbx x86_64-sp x86_64-mov
    -out

#
    CLASSIFIER
#

(class-nz byte) byte

(negclass (class byte) byte)
and class-nz byte
    not class byte

(class-hm byte) equal byte '#
(class-bs byte) equal byte '\\
(class-sq byte) equal byte '\'
(class-dq byte) equal byte '\"
(class-qm byte) equal byte '?
(class-lp byte) equal byte '(
(class-rp byte) equal byte ')
(class-09 byte) range byte '0 '9

(class-ws byte) or  equal byte ' 
                or  equal byte '\t
                or  equal byte '\n
                    equal byte '\r
(class-id byte) or  range byte 'A 'Z
                or  range byte 'a 'z
                or  range byte '0 '9
                or  equal byte '-
                    equal byte '_
(class-im byte) or  range byte '0 '9
                    equal byte '\'
(class-pt byte) or  equal byte '(
                or  equal byte ')
                    equal byte '?

(class-sb byte) negclass class-dq byte
(class-cb byte) negclass class-hm byte

#
    LEXER
#

(esc (class byte) -in)
if  lex class-bs -in
    lex class-nz -in
    lex class    -in

(lex-hm -in) lex class-hm -in
(lex-dq -in) lex class-dq -in
(lex-sq -in) lex class-sq -in
(lex-09 -in) lex class-09 -in
(lex-pt -in) lex class-pt -in
(lex-ws -in) lex class-ws -in
(lex-id -in) esc class-id -in
(lex-sb -in) esc class-sb -in
(lex-cb -in) esc class-cb -in

#
    TOKENIZER
#

(bunch (each -in) -in) for _ 0 (each -in)
(prefix (delim -in) (each -in) -in) and (delim -in) (each -in)
(group (delim -in) (each -in) -in) and and (delim -in) (bunch each -in) (delim -in)

(token -in span)
do  for _ 0
    or  bunch  lex-ws        -in
        group  lex-hm lex-cb -in
let a load -in
do  or  bunch  lex-id        -in
    or         lex-pt        -in
    or  prefix lex-sq lex-sb -in
    or  group  lex-dq lex-sb -in
        bunch  lex-09        -in
let b load -in
do  store Span-begin span a
    store Span-end   span b

#
    CODE GENERATOR
#

# context #

(X86_64-out   impl)                   impl
(X86_64-depth impl) add (X86_64-out   impl) word
(X86_64)                 X86_64-depth       word

# api #

# damn lies #

(gen-var     impl label) x86_64-var     (X86_64-out impl) (X86_64-depth impl) label
(gen-var-in  impl label) x86_64-var-in  (X86_64-out impl)                     label
(gen-let-end impl label) x86_64-let-end (X86_64-out impl) (X86_64-depth impl) label
(gen-for-end impl label) x86_64-for-end (X86_64-out impl) (X86_64-depth impl) label

# lies #

(gen-do    impl label) 0

(gen-and   impl label) x86_64-and   (X86_64-out impl) label
(gen-or    impl label) x86_64-or    (X86_64-out impl) label
(gen-else  impl label) x86_64-else  (X86_64-out impl) label
(gen-label impl label) x86_64-label (X86_64-out impl) label

# truth #

(gen-new -mem out ) let impl (to -mem add X86_64) do (x86_64-new out (X86_64-depth impl) (X86_64-out impl)) impl
(gen-del -mem impl) let out x86_64-del (load X86_64-out impl) do (to -mem sub X86_64) out

(gen-global  impl           ) x86_64-global
(gen-local   impl index     ) x86_64-local  (load X86_64-depth impl) index

(gen-lit     impl a b  label) x86_64-lit     (X86_64-out impl) a b
(gen-str     impl a b  label) x86_64-str     (X86_64-out impl) a b label
(gen-ref     impl           ) x86_64-ref     (X86_64-out impl) (load X86_64-depth impl)
(gen-capture impl offset    ) x86_64-capture (X86_64-out impl) (load X86_64-depth impl) offset
(gen-ref-end impl offset a b) x86_64-ref-end (X86_64-out impl) (load X86_64-depth impl) offset a b
(gen-term    impl           ) x86_64-term    (X86_64-out impl) (X86_64-depth impl)
(gen-branch  impl           ) x86_64-branch  (X86_64-out impl) (X86_64-depth impl)
(gen-trunk   impl arity     ) x86_64-trunk   (X86_64-out impl) (X86_64-depth impl) arity
(gen-def     impl a b       ) x86_64-def     (X86_64-out impl) a b
(gen-def-end impl           ) x86_64-def-end (X86_64-out impl)

#
    DENOTATIONAL SEMANTICS
#

# api #

(denote-new -mem out) op-new gen-new -mem out
(denote-del -mem sem) op-del gen-del -mem (Sem-impl sem)

# damn lies #

(denote-var     sem label a b) op-var     gen-var     sem label a b
(denote-var-in  sem label    ) op-var-in  gen-var-in  sem label
(denote-do      sem label    ) op-label   gen-do      sem label
(denote-do-end  sem label    ) op-label   gen-label   sem label
(denote-or      sem label    ) op-label   gen-or      sem label
(denote-or-end  sem label    ) op-label   gen-label   sem label
(denote-and     sem label    ) op-label   gen-and     sem label
(denote-and-end sem label    ) op-label   gen-label   sem label
(denote-for-end sem label    ) op-var-end gen-for-end sem label
(denote-let-end sem label    ) op-var-end gen-let-end sem label

# lies #

(denote-then  sem label) op-label gen-and   sem label
(denote-else  sem label) op-label gen-else  sem label
(denote-endif sem label) op-label gen-label sem label

(denote-flake sem      ) op-flake sem

# truth #

# expression semantics #

(denote-term       params     ) op-term                   params
(denote-trunk  sem type       ) op-trunk  gen-branch 
                                          gen-trunk
                                          gen-term    sem type
(denote-branch sem params rest) op-branch gen-branch
                                          gen-trunk
                                          gen-term    sem params rest
(denote-lit    sem a b label  ) op-lit    gen-lit     sem a b label
(denote-str    sem a b label  ) op-lit    gen-str     sem a b label
(denote-ref    sem a b label  ) op-ref    gen-ref
                                          gen-capture
                                          gen-ref-end sem a b

# type semantics #

(denote-type-unit  sem             ) op-type-unit
(denote-type-func  sem params      ) op-type-func  sem params
(denote-type-list  sem params param) op-type-list  sem params param
(denote-type-param sem a b type    ) op-type-param sem a b type 0

# declaration semantics #

(denote-decl    sem param) op-decl    gen-global  sem param
(denote-def     sem param) op-def     gen-def
                                      gen-local   sem param
(denote-def-end sem param) op-def-end gen-def-end sem param

#
    PARSER
#

# syntactic context #

(Syn-sem  syn)               syn
(Syn-in   syn) add (Syn-sem  syn) word
(Syn-span syn) add (Syn-in   syn) word
(Syn)               Syn-span      word

(parse-init -mem in out)
let syn (to -mem add Syn)
do  store (Syn-span syn) make-span -mem 0 0
do  store (Syn-in   syn) in
do  store (Syn-sem  syn) denote-new -mem out
do  token (Syn-in   syn) (load Syn-span syn)
    syn

(parse-del -mem syn)
let end (denote-del -mem (load Syn-sem syn))
do  to -mem sub Syn
    end

# abstract syntax #

(graft lit (stem (tree syn type) syn type label) (tree syn type) syn type)
let span (load Syn-span syn)
let a span-begin span
let b span-end span
and strncmp lit a (strlen lit) (sub a b)
do  token (Syn-in syn) span
let label 
    denote-flake (load Syn-sem syn)
do  stem tree syn type label
    1

(leaf (class byte) (denote syn a b label) syn)
let span (load Syn-span syn)
let a span-begin span
let b span-end   span
and class (peek a)
do  token (Syn-in syn) span
let label 
    denote-flake (load Syn-sem syn)
do  denote (load Syn-sem syn) a b label
    1

(knot (class byte) syn)
let span (load Syn-span syn)
and class (peek span-begin span)
do  token (Syn-in syn) span
    1

#
    EBREW
#

# expression syntax #

# damn lies #

(stem-seq (denote syn label) (denote-end syn label) (tree syn type) syn type label)
let sem (load Syn-sem syn)
do  tree syn type
do  denote sem label
do  tree syn type
    denote-end sem label

(stem-do  (tree syn type) syn type label) stem-seq denote-do  denote-do-end  tree syn type label
(stem-or  (tree syn type) syn type label) stem-seq denote-or  denote-or-end  tree syn type label
(stem-and (tree syn type) syn type label) stem-seq denote-and denote-and-end tree syn type label

(stem-var (denote-end syn flake) (tree syn type) syn type label)
let sem (load Syn-sem syn)
let span (load Syn-span syn)
let a span-begin span
let b span-end   span
if  not knot class-id syn
    error 3 "missing param-span"
do  tree syn (denote-type-unit (load Syn-sem syn))
do  denote-var sem label a b
do  denote-var-in sem label
do  tree syn type
    denote-end sem label

(stem-let (tree syn type) syn type label) stem-var denote-let-end tree syn type label
(stem-for (tree syn type) syn type label) stem-var denote-for-end tree syn type label

# lies #

(stem-if (tree syn type) syn type label)
let sem (load Syn-sem syn)
do  tree syn (denote-type-unit (load Syn-sem syn))
do  denote-then sem label
do  tree syn type
let label-else 
    denote-flake sem
do  denote-else sem label-else
do  denote-endif sem label
do  tree syn type
    denote-endif sem label-else

(stem (tree syn type) syn type)
# damn lies #
or  graft "do"  stem-do  tree syn type
or  graft "or"  stem-or  tree syn type
or  graft "and" stem-and tree syn type
or  graft "let" stem-let tree syn type
or  graft "for" stem-for tree syn type
# lies #
or  graft "if"  stem-if  tree syn type
# truth #
or  leaf class-im denote-lit syn
or  leaf class-id denote-ref syn
or  leaf class-dq denote-str syn
    error 4 "missing leaf"

# truth #

# Get the expected type, parse a branch,
then move on to the next one. #
(branches (tree syn type) syn first list)
and list
let type denote-term list
do  tree syn type
let rest denote-branch (load Syn-sem syn) first list
    branches tree syn first rest

# See if we need to parse any branches.
If so, do it, and try again. #
(trunk (tree syn type) syn type)
let list denote-trunk (load Syn-sem syn) type
and list
do  branches tree syn list list
    trunk tree syn type

# Check for a paren. If we find one,
recurse and look for a closer.
Otherwise, parse a trunk. #
(nest (tree syn type) syn type)
if  knot class-lp syn
do  tree syn type
or  knot class-rp syn
    error 5 "missing paren"
do  stem tree syn type
    trunk tree syn type

# Top-level expression :) #
(tree syn type) nest tree syn type

# type syntax #

# badly written and buggy lies #

(typedecl (den sem a b type) (typename-which (parameter syn) syn) (parameter syn) syn)
let span (load Syn-span syn)
let a span-begin span
let b span-end   span
and knot class-id syn
    den (load Syn-sem syn) a b (typename-which parameter syn)

(typename-params (parameter syn) syn)
and not knot class-rp syn
let x (parameter syn)
    denote-type-list (load Syn-sem syn) (typename-params parameter syn) x 

(typename-func (parameter syn) syn) denote-type-func (load Syn-sem syn) (typename-params parameter syn)
(typename-unit (parameter syn) syn) denote-type-unit (load Syn-sem syn)

(parameter syn) typedecl denote-type-param (if (knot class-lp syn) typename-func typename-unit) parameter syn

# declaration syntax #

# Parse signatures and trees until none remain. #
(decl syn)
and let param parameter syn
    and param
    let sem (load Syn-sem syn)
    do  denote-decl sem param
    or  knot class-qm syn
    do  denote-def sem param
    do  tree syn 0
        denote-def-end sem param
    decl syn

#
    ENTRY
#

# We get input buffer and we need to give output buffer. #
(main (return code out end) in out -mem)
let syn (parse-init -mem in out) #init with in/out buffers#
do  decl syn                     #run parser#
let end (parse-del -mem syn)     #cleanup#
    return 0 out end             #write out buffer#

# Set fixed memory layout. We request 3MB currently.
                        inbuf     outbuf    heap     #
(_start) runtime main (pow2 20) (pow2 20) (pow2 20)

#
    NOTES
#

#
if we are expecting a function:
    push a closure parameter onto the list:
        the closure parameter says where the
        capture pointer is in each frame. we
        use that to a) find the capture pointer
        in the lambda frame, then b) find
        closed variables in the captured frame.
    start a lambda section.
    compile the lambda
    .previous
    pop the closure token
otherwise:
    just branch
#

#if  (and type (load Type-kind type))
let sem (load Syn-sem syn)
let label (op-flake sem)
let capture (x86_64-lambda (load Sem-impl sem) label)
let var (to (Sem-mem sem) add struct-Var)
do  store (Param-span var) 0
do  store (Param-type var) frame
do  store (Param-impl var) capture
do  store (Sem-list sem) push (Sem-mem sem) var (load Sem-list sem)
let params (load Type-params type)
do  op-parameters tree syn params 0
do  tree syn 0
do  x86_64-lambda-end (load Sem-impl sem) label (list-count load Type-params type)
do  store (Sem-list sem) pop (load Sem-list sem)
let rest 
    denote-branch (load Syn-sem syn) params index
    branches tree syn rest (successive index)#


#
(x86_64-lambda impl label)
do  x86_64-label-stmt-suf
    x86_64-label-name label
    put-lf
    x86_64-label-name label
    put-string ".section .text."
    (X86_64-out impl)
    x86_64-push (X86_64-depth impl) (X86_64-out impl) "%rbx"

(x86_64-lambda-end impl label arity)
do  x86_64-fpop (X86_64-depth impl) (X86_64-out impl) 1
do  x86_64-fpop (X86_64-depth impl) (X86_64-out impl) (if above arity 6 arity 6)
do  put-lf
    put-string ".previous"
    put-string x86_64-str-ret (X86_64-out impl)
do  x86_64-to-rax
    put-string x86_64-str-rip
    x86_64-label-name label
    put-string "mov " (X86_64-out impl)
    x86_64-push (X86_64-depth load impl) (X86_64-out load impl) "%rax"
#