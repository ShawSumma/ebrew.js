
(ws-new port) ?
(wss-new port) ?
(on-close ws (cb)) ?
(on-open ws (cb)) ?
(on-message [data] ws (cb data)) ?
(on-connection [data] wss (cb data)) ?
(ws-send ws data) ? 

(str obj) ?
(print x) ?
(get obj ent) ?
(set obj ent val) ?

(to-json o) ?
(from-json s) ?
(object) ?

(math-sin x) ?
(math-cos x) ?
(math-floor x) ?
(math-sqrt x) ?
(math-PI) ?
(math-random) ?
(add y x) ?
(sub y x) ?
(mul y x) ?
(div y x) ?
(mod y x) ?

(if c (t) (f)) ?
(while (c) (t)) ?

(above x y) ?
(equal x y) ?

(stop-interval iv) ?
(start-interval ms (f)) ?

(get-time) ?

# basics #

(let [x] x (in x)) in x

(do x y) y

(not x) if x 0 1

(and x (y)) if x y 0
(or x (y)) if x x y

(rem y x) mod y add y mod y x

# movement and location #

(player-size) 40
(world-size) 800

(deg-to-rad n) mul math-PI div 180 n

(random low high)
add low mul sub low high math-random

(distance a b)
let ax get a "x"
let ay get a "y"
let bx get b "x"
let by get b "y"
let xd sub ax bx
let yd sub ay by
math-sqrt add mul xd xd mul yd yd

# arrays #

(range-upto-from [n] low high (in n))
and above high low
do  in low
    range-upto-from n add 1 low high 
        in n
        
(range-upto [n] high (in n))
range-upto-from n 0 high in n

(random-pos)
let pos object
do  set pos "x" add div 2 player-size mul player-size math-floor div player-size random 0 world-size 
do  set pos "y" add div 2 player-size mul player-size math-floor div player-size random 0 world-size 
    pos

(new-array)
let obj object
do  set obj "length" 0
    obj

(array-each-in-range [name] obj low high (in n name))
and above high low
do  in low get obj low
    array-each-in-range name obj add 1 low high in n name

(array-each [name] obj (in n name))
array-each-in-range name obj 0 get obj "length"
    in n name

(array-length arr)
get arr "length"

(array-push arr ent)
let len array-length arr
do  set arr "length" add 1 len
    set arr len ent

(array-pop arr ent)
let len array-length arr
do  set arr "length" sub 1 len
    get arr len

(array-insert arr where item)
let ret new-array
do  array-each ent arr
    do  and equal n where
            array-push ret item
        array-push ret ent
    ret

# players #

(new-part n pos)
let xpos object
do  set xpos "x" sub mul player-size n get pos "x"
do  set xpos "y" get pos "y"
let ret object
do  set ret "pos" xpos
    ret

(new-parts pos count)
let parts new-array
do  range-upto n count
        array-push parts new-part n pos
    parts

(new-random-color)
let obj object
do  set obj "r" math-floor random 100 256
do  set obj "g" math-floor random 100 256
do  set obj "b" math-floor random 100 256
do  set obj "a" 255
    obj

(new-greenish-color)
let obj object
do  set obj "r" math-floor random 0 100
do  set obj "g" 255
do  set obj "b" math-floor random 0 100
do  set obj "a" 255
    obj
    
(new-player game)
let count 5
let players get game "players"
let length array-length players
let obj object
do  set obj "pos" random-pos
do  set obj "parts" new-parts get obj "pos" count
do  set obj "color" new-random-color
do  set obj "dir" math-floor random 0 4
do  array-push players obj
    obj

# game state #

(new-apple)
let apple object
do  set apple "color" new-greenish-color
do  set apple "pos" random-pos
    apple

(new-apples-for game)
let apples new-array
do  range-upto n 1
    array-push apples new-apple 
do  set game "apples" apples
    0

(new-game)
let obj object
let players new-array
do  new-apples-for obj
do  set obj "players" players
    obj

# inputs #

(handle-key keys player)
let pos get player "parts"
do  and get keys "right"
        set player "dir" 0
do  and get keys "down"
        set player "dir" 1
do  and get keys "left"
        set player "dir" 2
do  and get keys "up"
        set player "dir" 3
    0
# ticks #
    
(bound-pos n)
if  above 0 n
    bound-pos add world-size n
if  not above world-size n 
    bound-pos sub world-size n
    n

(game-tick-move-player player)
let dir get player "dir"
let pos get player "pos"
let next-pos object
let move-x mul player-size math-cos deg-to-rad mul 90 dir
let move-y mul player-size math-sin deg-to-rad mul 90 dir
do  set next-pos "x" bound-pos add move-x get pos "x"
do  set next-pos "y" bound-pos add move-y get pos "y"
do  set player "pos" next-pos
    0

(player-dist player game)
let best object
do  set best "best" mul 2 world-size
let parts get player "parts"
let head get get parts 0 "pos"
do  array-each other get game "players"
        and not equal other player
        array-each part get other "parts"
            let nd distance head get part "pos"
            and above get best "best" nd
                set best "best" nd
    get best "best"

(apple-dist player game)
let best object
do  set best "best" mul 2 world-size
let apples get game "apples"
let pos get player "pos"
do  array-each apple apples
    let dist distance get apple "pos" pos
    and above get best "best" dist
        set best "best" dist
    get best "best"


(game-tick game)
let new-apple object
do  set new-apple "hit" 0
let moved-players new-array
do  array-each player get game "players"
    and player
    do  game-tick-move-player player
    let parts get player "parts"
    let parts-len get parts "length" 
    let moved-parts new-array
    do  array-push moved-parts new-part 0 get player "pos"
    let has-apple above div 2 player-size apple-dist player game
    do  and has-apple set new-apple "hit" 1
    do  array-each-in-range part parts 0 sub not has-apple parts-len
        array-push moved-parts part
    do  set player "parts" moved-parts
        array-push moved-players player
do  and get new-apple "hit"
        new-apples-for game
let players-without-dead new-array
do  array-each player moved-players
    and not get player "die"
    let dist player-dist player game
    and not above player-size dist
        array-push players-without-dead player
    set game "players" players-without-dead

# init #

(main) 
let nth object
let game new-game
let wss wss-new 8080
do  start-interval div 3 1000 game-tick game 
on-connection ws wss
    let player new-player game
    let iv object
    do  set iv "interval"
        start-interval div 3 1000
            let msg object
            do  set msg "game" game
                ws-send ws to-json msg 
    do  ws-send ws to-json object
    do  on-close ws
        do  set player "die" 1
            stop-interval get iv "interval"
    do  on-message data ws
        let got from-json data 
        let type get got "type"
        if  equal type "ping"
            0
        if  equal type "move"
            handle-key got player
            0
        0