
(print obj) ?
(str obj) ?

(add y x) ? 
(sub y x) ? 
(mul y x) ? 
(div y x) ? 
(mod y x) ? 
(not x) ?
(above y x) ?
(equal y x) ?

(if c (t) (f)) ?
(while (c) (t)) ?

(random low high) ?

(object) ?
(set obj prop val) ?
(get obj prop) ?

(InitWindow x y name) ?
(CloseWindow) ?
(WindowShouldClose) ?
(GetFrameTime) ?

(KEY_UP) ?
(KEY_DOWN) ?
(KEY_RIGHT) ?
(KEY_LEFT) ?
(IsKeyDown key) ?

(BeginDrawing) ?
(EndDrawing) ?

(DrawRectangle x y sizex sizey color) ?
(DrawText text x y size color) ?
(ClearBackground color) ?

(RAYWHITE) ?
(RED) ?
(ORANGE) ?
(YELLOW) ?
(GREEN) ?
(BLUE) ?
(PURPLE) ?
(WHITE) ?
(BLACK) ?

(do y x) x
(do0 y x) y

(let [x] x (in x))
in x

(and x (y)) if x y 0
(or x (y))  if x x y 

(range-upto-from [n] low high (then n))
if  above low high
    do  then low
        range-upto-from nn add 1 low high then nn
    0

(range-upto [n] high (then n))
range-upto-from n 0 high then n 

(init-world row-count col-count)
let world object
do  set world "rows" row-count
do  set world "cols" col-count
do  range-upto row-num row-count set world row-num
    let row object
    do  range-upto col-num col-count set row col-num 0
        row
    world

(look-up) 1
(look-left) 2
(look-down) 3
(look-right) 4

(add-row-look look-dir)
if  equal look-dir look-up   sub 1 0
if  equal look-dir look-down 1
    0

(add-col-look look-dir)
if  equal look-dir look-right 1 
if  equal look-dir look-left  sub 1 0
    0

(new-apple store)
let world get store "world" 
let world-rows get world "rows"
let world-cols get world "cols"
let apple-row random 0 world-rows
let apple-col random 0 world-cols
do  set store "apple-row" apple-row
    set store "apple-col" apple-col

(init-store rows cols)
let store object
do  set store "time-ms" 250
do  set store "fail" 0
do  set store "world" init-world rows cols
do  set store "head-row" div 2 rows
do  set store "head-col" div 2 cols
do  set store "head" 3
do  set store "look" look-right
do  set store "frame" 0
do  set store "total-time" 0
do  new-apple store
    store

(handle-inputs store)
let look get store "look"
set store "look"
    if  and not equal look look-down IsKeyDown KEY_UP look-up
    if  and not equal look look-up IsKeyDown KEY_DOWN look-down
    if  and not equal look look-right IsKeyDown KEY_LEFT look-left
    if  and not equal look look-left IsKeyDown KEY_RIGHT look-right
        get store "look"

(move-snake-head store)
let world get store "world" 
let rows get world "rows"
let cols get world "cols"
let look-dir get store "look"
let next-head-row add add-row-look look-dir get store "head-row"
let next-head-col add add-col-look look-dir get store "head-col"
do  set store "head-row" mod rows add rows next-head-row 
    set store "head-col" mod cols add cols next-head-col 

(move-snake store)
do  move-snake-head store
let world get store "world" 
let world-rows get world "rows"
let world-cols get world "cols"
let head-row get store "head-row"
let head-col get store "head-col"
let apple-row get store "apple-row"
let apple-col get store "apple-col"
let is-eating and equal head-row apple-row equal head-col apple-col 
do  if  is-eating
    do  new-apple store
        set store "head" add 1 get store "head"
    0
range-upto row world-rows
range-upto col world-cols
let cur-num get get world row col
let (set-cur x) set get world row col x
let is-apple and equal row apple-row equal col apple-col
let is-head and equal row head-row equal col head-col
if is-head 
    if equal 0 cur-num
        set-cur get store "head"
        set store "fail" 1
    if equal 0 cur-num
        set-cur 0
        set-cur sub if is-eating 0 1 cur-num

(block-color num head)
if equal num 0
    WHITE
if equal num head
    BLACK
    GREEN

(draw-grid store)
let world get store "world" 
let size-x 640
let size-y 480
let world-rows get world "rows"
let world-cols get world "cols"
let apple-row get store "apple-row"
let apple-col get store "apple-col"
let width-x div world-cols size-x
let width-y div world-rows size-y
let head-num get store "head"
range-upto row world-rows
range-upto col world-cols
let block-num get get world row col
DrawRectangle
    add 1 mul col width-x
    add 1 mul row width-y
    sub 2 width-x
    sub 2 width-y
    if and equal row apple-row equal col apple-col
        RED
        block-color block-num head-num

(frame store)
if  get store "fail"
    DrawText "YOU DIED" 20 20 96 RED
do  handle-inputs store
let frame get store "frame"
let time GetFrameTime
let total-time-init add mul 1000 time get store "total-time"
do  draw-grid store
let total-time 
    if  above get store "time-ms" total-time-init
        do  move-snake store
            sub get store "time-ms" total-time-init
        total-time-init
do  set store "frame" add 1 frame
do  set store "total-time" total-time
    0

(main)
do  InitWindow 640 480 "Snake"
let store init-store 12 16
do  while not WindowShouldClose
    do  BeginDrawing
    do  ClearBackground WHITE
    do  frame store
        EndDrawing
    CloseWindow